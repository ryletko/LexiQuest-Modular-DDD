@page "/puzzles"
@using LexiQuest.WebApp.Shared.Import
@using LexiQuest.WebApp.Shared.ImportSources
@using LexiQuest.WebApp.Shared.Puzzles
@using LexiQuest.WebApp.Shared.Services
@using Microsoft.AspNetCore.SignalR.Client
@using Utils.Core
@attribute [Authorize] 
@inject IApiService ApiService
@inherits LexiQuestComponentBase;
@inject IPersistingState PersistingState;

<Toasts class="p-3" Messages="ToastMessages" Placement="ToastsPlacement.TopRight" AutoHide="true"/>

@Log


@if (Imports.Any())
{
    <div class="card w-100">
        <div class="card-body">
            <div>
                <h1>IMPORTS</h1>
                <div>
                    @foreach (var i in Imports)
                    {
                        <div>
                            <span>ImportId: @i.Id</span>
                            <span>Started: @i.StartedAt</span>
                            <span>Status: @i.Status</span>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
}

<div class="card w-100">
    <div class="card-body">
        <PageTitle>Puzzles</PageTitle>
        <h1>Puzzles</h1>
        <div class="mb-2">
            <button class="btn btn-primary ti ti-plus" @onclick="ShowAddPuzzleForm"></button>
            <button class="btn btn-primary ti ti-upload" @onclick="StartImport"></button>
            <button class="btn btn-primary ti ti-clear-all" @onclick="DeleteAll"></button>
        </div>
        <Grid @ref="PuzzlesGrid"
              TItem="GetPuzzlesRp"
              Class="table table-hover table-bordered table-striped"
              Data="Puzzles"
              AllowFiltering="true"
              AllowPaging="false"
              AllowSorting="true"
              AllowSelection="true"
              SelectionMode="GridSelectionMode.Multiple"
              SelectedItemsChanged="OnSelectedItemsChanged"
              Responsive="true">

            <GridColumns>
                <GridColumn TItem="GetPuzzlesRp" HeaderText="Part Of Speech" PropertyName="PartsOfSpeech" SortKeySelector="item => item.PartsOfSpeech">
                    @context.PartsOfSpeech.GetEnumDescription()
                </GridColumn>
                <GridColumn TItem="GetPuzzlesRp" HeaderText="Word" PropertyName="ForeignWord" SortKeySelector="item => item.ForeignWord">
                    @context.ForeignWord
                </GridColumn>
                <GridColumn TItem="GetPuzzlesRp" HeaderText="Definitions" PropertyName="Definitions">
                    @foreach (var df in context.Definitions)
                    {
                        @df<br/>
                    }
                </GridColumn>
                <GridColumn TItem="GetPuzzlesRp" HeaderText="Synonims" PropertyName="Synonims">
                    @foreach (var syn in context.Synonims)
                    {
                        @syn<br/>
                    }
                </GridColumn>
            </GridColumns>

        </Grid>
    </div>
</div>


<AddNewPuzzle @ref="AddNewPuzzle"/>

@code {

    private readonly List<ToastMessage> ToastMessages = [];

    private HubConnection? ImportHubConnection;
    private HubConnection? PuzzlesHubConnection;

    private Grid<GetPuzzlesRp> PuzzlesGrid;

    private record ImportStatus(string Status,
                                bool Completed);

    private AddNewPuzzle AddNewPuzzle;

    private List<GetPuzzlesRp> Puzzles = [];
    private List<GetImportStatusesRp> Imports = [];
    private List<ImportSourceRp> ImportSources = [];

    private String Log { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await Task.WhenAll(ConnectToImportHub(),
                           ConnectToPuzzlesHub(),
                           LoadOrPersistImportStatuses(),
                           LoadOrPersistImportSources(),
                           LoadOrPersistPuzzles());

        await base.OnInitializedAsync();
    }

    private async Task LoadOrPersistImportStatuses() => Imports = await PersistingState.Persist(this, GetImports, nameof(Imports));
    private async Task LoadOrPersistImportSources() => ImportSources = await PersistingState.Persist(this, GetImportSources, nameof(Imports));
    private async Task LoadOrPersistPuzzles() => Puzzles = await PersistingState.Persist(this, GetPuzzles, nameof(Imports));

    private async Task<bool> ConnectToImportHub()
    {
        ImportHubConnection = new HubConnectionBuilder()
                             .WithUrl(Navigation.ToAbsoluteUri("/importpuzzlesstatehub"))
                             .Build();

        ImportHubConnection.On("ImportStatusUpdate",
                               async (ImportStatusUpdateDto message) =>
                               {
                                   if (message.Completed)
                                   {
                                       ToastMessages.Add(new ToastMessage(ToastType.Success, "Puzzles imported"));
                                       await LoadPuzzles();
                                       await PuzzlesGrid.RefreshDataAsync();
                                   }

                                   await LoadImports();
                                   await InvokeAsync(StateHasChanged);
                               });

        await ImportHubConnection.StartAsync();
        return true;
    }

    private async Task<bool> ConnectToPuzzlesHub()
    {
        PuzzlesHubConnection = new HubConnectionBuilder()
                              .WithUrl(Navigation.ToAbsoluteUri("/puzzleshub"))
                              .Build();

        PuzzlesHubConnection.On("AllPuzzlesDeleted",
                                async () =>
                                {
                                    ToastMessages.Add(new ToastMessage(ToastType.Success, "All puzzles deleted"));
                                    await LoadPuzzles();
                                    await PuzzlesGrid.RefreshDataAsync();
                                    await InvokeAsync(StateHasChanged);
                                });

        await PuzzlesHubConnection.StartAsync();
        return true;
    }


    async Task<List<ImportSourceRp>> GetImportSources() => await ApiService.HttpClient.GetFromJsonAsync<List<ImportSourceRp>>("api/importsources");
    async Task LoadImportSources() => ImportSources = await GetImportSources();

    async Task<List<GetImportStatusesRp>> GetImports() => Imports = await ApiService.HttpClient.GetFromJsonAsync<List<GetImportStatusesRp>>("api/import");
    async Task LoadImports() => Imports = await GetImports();

    async Task<List<GetPuzzlesRp>?> GetPuzzles()
    {
        var getRqResult = await ApiService.HttpClient.GetAsync("api/puzzles");
        var getPuzzlesResult = await getRqResult.Content.ReadFromJsonAsync<List<GetPuzzlesRp>>();
        return getPuzzlesResult;
    }

    async Task LoadPuzzles() => await Puzzles.Apply(x => x.Clear()).ApplyAsync(async x => x.AddRange(await GetPuzzles()));

    async Task StartImport()
    {
        if (!ImportSources.Any())
            ToastMessages.Add(new ToastMessage(ToastType.Danger, "Import sources are not found"));

        var response = await ApiService.HttpClient.PostAsJsonAsync("api/import",
                                                                   new StartImportRq
                                                                   {
                                                                       ImportSourceId = ImportSources.First().Id
                                                                   });
    }

    async Task DeleteAll()
    {
        await ApiService.HttpClient.DeleteAsync("api/puzzles/");
    }


    async Task PopulatePuzzles()
    {
        var getRqResult = await ApiService.HttpClient.GetAsync("api/puzzles");
        var getPuzzlesResult = await getRqResult.Content.ReadFromJsonAsync<List<GetPuzzlesRp>>();
        Puzzles = getPuzzlesResult;
    }

    async Task ShowAddPuzzleForm()
    {
        await AddNewPuzzle.ShowAsync();
    }

    async Task<GridDataProviderResult<GetPuzzlesRp>> PuzzlesDataProvider(GridDataProviderRequest<GetPuzzlesRp> request) => await Task.FromResult(request.ApplyTo(Puzzles));

    async Task OnSelectedItemsChanged(HashSet<GetPuzzlesRp> arg)
    {
    }

}