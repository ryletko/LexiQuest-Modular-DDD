@page "/quizgame"
@inject IApiService ApiService;
@using LexiQuest.WebApp.Shared.QuizGame
@using LexiQuest.WebApp.Shared.Services
@using Microsoft.AspNetCore.SignalR.Client
@using Utils.Core
@attribute [Authorize]
@inject NavigationManager Navigation
@inject IPersistingState PersistingState

@Log

<div class="card quiz-game-card mx-auto">
    <div class="card-body">
        @if (Loading)
        {
            <PageTitle>Loading</PageTitle>
            <h1>Loading</h1>
            @foreach (var startedGamesStatuses in StartedGamesStatuses)
            {
                <div>@startedGamesStatuses.RequestedAt.FormatDateTime(): @startedGamesStatuses.Status</div>
            }
        }
        else
        {
            <PageTitle>Quiz Game</PageTitle>
            @if (CurrentGameId != null)
            {
                <GameComponent GameId="CurrentGameId.Value" OnGameFinished="OnGameFinished"></GameComponent>
            }
            else
            {
                <div>NO STARTED GAMES</div>
            }
        }
    </div>
</div>

@code {

    private record PrerenderedState(Guid? CurrentGameId,
                                    List<GetStartedGamesStatusesRp> StartedGamesStatuses,
                                    bool Loading);

    private string Log;

    private HubConnection? HubConnection { get; set; }

    private bool Loading = true;

    private Guid? CurrentGameId { get; set; }

    private List<GetStartedGamesStatusesRp> StartedGamesStatuses = [];

    protected override async Task OnInitializedAsync()
    {
        await Task.WhenAll(ConnectToGameStateHub(), LoadOrPersistState());
        await base.OnInitializedAsync();
    }

    private async Task LoadOrPersistState()
    {
        var prerenderedState = await PersistingState.Persist(this, ProvideStartedGameForPersistance);
        CurrentGameId = prerenderedState.CurrentGameId;
        StartedGamesStatuses.AddRange(prerenderedState.StartedGamesStatuses);
        Loading = prerenderedState.Loading;
        await InvokeAsync(StateHasChanged);
    }

    private async Task<bool> ConnectToGameStateHub()
    {
        HubConnection = new HubConnectionBuilder()
                       .WithUrl(Navigation.ToAbsoluteUri("/startgamestatehub"))
                       .Build();

        HubConnection.On("StartNewGameStatusUpdate",
                         async (StartNewGameStatusDto message) =>
                         {
                             if (message.Completed)
                                 await CheckStartedGame();

                             await PopulateStartNewGameStatuses();
                             await InvokeAsync(StateHasChanged);
                         });

        await HubConnection.StartAsync();
        return true;
    }
    
    private async Task PopulateStartNewGameStatuses()
    {
        StartedGamesStatuses = await ApiService.HttpClient.GetFromJsonAsync<List<GetStartedGamesStatusesRp>>("api/quizgame/games/started/statuses") ?? [];
    }

    private async Task StartNewGame()
    {
        var response = await ApiService.HttpClient.PostAsync("api/quizgame/games/started", null);
    }

    private async Task<bool> CheckStartedGame()
    {
        var startedGames = await ApiService.HttpClient.GetFromJsonAsync<List<GetStartedGamesRp>>("api/quizgame/games/started");
        CurrentGameId = startedGames.FirstOrDefault()?.Guid;
        if (CurrentGameId != null)
        {
            Loading = false;
            return true;
        }

        return false;
    }

    private async Task<bool> CheckStatusesForStartGameRequests()
    {
        await PopulateStartNewGameStatuses();
        return StartedGamesStatuses.Any();
    }

    private async Task ProvideStartedGame()
    {
        if (await CheckStartedGame())
            return;

        if (await CheckStatusesForStartGameRequests())
            return;

        await StartNewGame();
    }


    private async Task<PrerenderedState> ProvideStartedGameForPersistance()
    {
        await ProvideStartedGame();
        return new(CurrentGameId, StartedGamesStatuses, Loading);
    }


    private async Task OnGameFinished()
    {
        await ProvideStartedGame();
    }

}